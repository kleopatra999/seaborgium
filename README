Seaborgium
----------
License: http://opensource.org/licenses/BSD-3-Clause

Debugger prototype. Not much to see yet.

Currently only compiles on Windows.

To build, VS2013, CMake, ninja, and probably Python 2.x in the path:

tools\regen Release
ninja -C out && out\sg_test && out\sg



CREDITS
-------

Nice libraries that Seaborgium uses/referenced in whole or in part:

https://github.com/bkaradzic/bx
https://github.com/bkaradzic/bgfx
Copyright 2010-2014 Branimir Karadzic. All rights reserved.
http://opensource.org/licenses/BSD-2-Clause


https://github.com/memononen/nanovg/
Copyright (c) 2013 Mikko Mononen memon@inside.org


https://github.com/nothings/stb/stb_image.c
https://github.com/nothings/stb/stb_freetype.h
Public domain by Sean Barrett


http://glew.sourceforge.net/
Modified BSD License and MIT License by Milan Ikits, Marcelo Magallon, et al.


http://code.google.com/p/re2/
http://opensource.org/licenses/BSD-3-Clause



RANDOM MUTTERINGS
-----------------

bx is great except for the casing of function names, want a bunch of it:
- platform macros
- simple os functionality (dlopen, etc.)
- thread, mutex, semaphore, spscqueue

entry point gunk: ~1w
- create a window
- spin up main thread and call int Main(argc, argv).
- handle/post system events to messageloop

messageloop: ~1w
- blocking processor
- post into it from anywhere

simple 2d renderer, look at what gwen does for basic abstraction ~2w
- opengl everywhere is probably simplest: rect, line, texture, etc.
- font rendering: simple monospace bitmap font, maybe a few sizes
- nanovg is nice, needs render to texture

ui widgets:
- docking panes ~1w
- scrollable window ~1w
- source viewer ~1w
  - syntax highlighting ~1w
  - selection for copy paste ~1w
  - gutter indicators
- scrolling output text window ~1w
- single line text edit (command line, value edit) ~2w
- tree grid view (locals, watch, breakpoints, etc.) modelled on win32-style ~2w
  - resizable columns with contents clip/ellipsis
  - custom renderer/formatting per cell
  - inline edit to modify locals ~1w
- color theming ~1w

actual ui
- command line equivalent for all view windows
  - it'd be nice if it called through the same way
  - (view "xyz"
- create process
- attach to process
- set, edit, update breakpoints
- step in, out, over


thread 0: SYSTEM: window create, post system events to UI
thread 1: UI: handles events, draws UI, sends control events to DEBUGGER
thread 2: RENDER: double buffered renderer processing UI draws
thread 3: DEBUGGER: interacts with debugger engine and target process
                    posts updates back to UI

don't really need RENDER thread, GL drivers are just shims to another thread
these days anyway.

workspace:
- get default windows up/draggable
- source view as main
- figure out non-gamey-render loop (invalidates as nececessary, probably only
  full repaint w/o dirty rects)
- command line via esc or ` with text editor widget
- theming

widgets:
- source view (with mixed disasm)
- single line text edit (command line, watch edit)
- tree grid view (stack, breakpoints, threads, watch, locals)
- scrolling text output (command, process output)
